// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: registration.proto
#ifndef GRPC_registration_2eproto__INCLUDED
#define GRPC_registration_2eproto__INCLUDED

#include "registration.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace core {

class Registration final {
 public:
  static constexpr char const* service_full_name() {
    return "core.Registration";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::core::SubscribeReply>> Subscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::core::SubscribeReply>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::core::PublishReply>> Publish(::grpc::ClientContext* context, const ::core::PublishRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::core::PublishReply>>(PublishRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>> AsyncPublish(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>>(AsyncPublishRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    virtual ::grpc::Status ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::core::ServiceServerReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>> AsyncServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>>(AsyncServiceServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>> PrepareAsyncServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>>(PrepareAsyncServiceServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::core::ServiceClientReply>> ServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::core::ServiceClientReply>>(ServiceClientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>> AsyncServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>>(AsyncServiceClientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>> PrepareAsyncServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>>(PrepareAsyncServiceClientsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Subscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest* request, ::grpc::ClientReadReactor< ::core::SubscribeReply>* reactor) = 0;
      virtual void Publish(::grpc::ClientContext* context, const ::core::PublishRequest* request, ::grpc::ClientReadReactor< ::core::PublishReply>* reactor) = 0;
      virtual void ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest* request, ::grpc::ClientReadReactor< ::core::ServiceClientReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::core::SubscribeReply>* SubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::SubscribeReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::core::PublishReply>* PublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::PublishReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>* AsyncServiceServersRaw(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::ServiceServerReply>* PrepareAsyncServiceServersRaw(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::core::ServiceClientReply>* ServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>* AsyncServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::core::ServiceClientReply>* PrepareAsyncServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::core::SubscribeReply>> Subscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::core::SubscribeReply>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::SubscribeReply>> AsyncSubscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::SubscribeReply>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::SubscribeReply>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::SubscribeReply>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::core::PublishReply>> Publish(::grpc::ClientContext* context, const ::core::PublishRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::core::PublishReply>>(PublishRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::PublishReply>> AsyncPublish(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::PublishReply>>(AsyncPublishRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::PublishReply>> PrepareAsyncPublish(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::PublishReply>>(PrepareAsyncPublishRaw(context, request, cq));
    }
    ::grpc::Status ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::core::ServiceServerReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>> AsyncServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>>(AsyncServiceServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>> PrepareAsyncServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>>(PrepareAsyncServiceServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::core::ServiceClientReply>> ServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::core::ServiceClientReply>>(ServiceClientsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::ServiceClientReply>> AsyncServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::ServiceClientReply>>(AsyncServiceClientsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::core::ServiceClientReply>> PrepareAsyncServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::core::ServiceClientReply>>(PrepareAsyncServiceClientsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::core::SubscribeRequest* request, ::grpc::ClientReadReactor< ::core::SubscribeReply>* reactor) override;
      void Publish(::grpc::ClientContext* context, const ::core::PublishRequest* request, ::grpc::ClientReadReactor< ::core::PublishReply>* reactor) override;
      void ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response, std::function<void(::grpc::Status)>) override;
      void ServiceServers(::grpc::ClientContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServiceClients(::grpc::ClientContext* context, const ::core::ServiceClientRequest* request, ::grpc::ClientReadReactor< ::core::ServiceClientReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::core::SubscribeReply>* SubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::core::SubscribeReply>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::core::SubscribeReply>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::core::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::core::PublishReply>* PublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request) override;
    ::grpc::ClientAsyncReader< ::core::PublishReply>* AsyncPublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::core::PublishReply>* PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::core::PublishRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>* AsyncServiceServersRaw(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::ServiceServerReply>* PrepareAsyncServiceServersRaw(::grpc::ClientContext* context, const ::core::ServiceServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::core::ServiceClientReply>* ServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request) override;
    ::grpc::ClientAsyncReader< ::core::ServiceClientReply>* AsyncServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::core::ServiceClientReply>* PrepareAsyncServiceClientsRaw(::grpc::ClientContext* context, const ::core::ServiceClientRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Publish_;
    const ::grpc::internal::RpcMethod rpcmethod_ServiceServers_;
    const ::grpc::internal::RpcMethod rpcmethod_ServiceClients_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::core::SubscribeRequest* request, ::grpc::ServerWriter< ::core::SubscribeReply>* writer);
    virtual ::grpc::Status Publish(::grpc::ServerContext* context, const ::core::PublishRequest* request, ::grpc::ServerWriter< ::core::PublishReply>* writer);
    virtual ::grpc::Status ServiceServers(::grpc::ServerContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response);
    virtual ::grpc::Status ServiceClients(::grpc::ServerContext* context, const ::core::ServiceClientRequest* request, ::grpc::ServerWriter< ::core::ServiceClientReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::core::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::core::SubscribeReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publish() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::core::PublishRequest* request, ::grpc::ServerAsyncWriter< ::core::PublishReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServiceServers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceServers(::grpc::ServerContext* context, ::core::ServiceServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::ServiceServerReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServiceClients() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceClients(::grpc::ServerContext* context, ::core::ServiceClientRequest* request, ::grpc::ServerAsyncWriter< ::core::ServiceClientReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<WithAsyncMethod_Publish<WithAsyncMethod_ServiceServers<WithAsyncMethod_ServiceClients<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::core::SubscribeRequest, ::core::SubscribeReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::core::SubscribeReply>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::core::PublishRequest, ::core::PublishReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::PublishRequest* request) { return this->Publish(context, request); }));
    }
    ~WithCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::core::PublishReply>* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::core::PublishRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServiceServers() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::core::ServiceServerRequest, ::core::ServiceServerReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::ServiceServerRequest* request, ::core::ServiceServerReply* response) { return this->ServiceServers(context, request, response); }));}
    void SetMessageAllocatorFor_ServiceServers(
        ::grpc::MessageAllocator< ::core::ServiceServerRequest, ::core::ServiceServerReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::ServiceServerRequest, ::core::ServiceServerReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServiceServers(
      ::grpc::CallbackServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServiceClients() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::core::ServiceClientRequest, ::core::ServiceClientReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::ServiceClientRequest* request) { return this->ServiceClients(context, request); }));
    }
    ~WithCallbackMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::core::ServiceClientReply>* ServiceClients(
      ::grpc::CallbackServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<WithCallbackMethod_Publish<WithCallbackMethod_ServiceServers<WithCallbackMethod_ServiceClients<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publish() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServiceServers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServiceClients() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publish() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublish(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServiceServers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceServers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServiceClients() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServiceClients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Publish() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Publish(context, request); }));
    }
    ~WithRawCallbackMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Publish(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServiceServers() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ServiceServers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ServiceServers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServiceClients() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ServiceClients(context, request); }));
    }
    ~WithRawCallbackMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServiceClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServiceServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ServiceServers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::ServiceServerRequest, ::core::ServiceServerReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::ServiceServerRequest, ::core::ServiceServerReply>* streamer) {
                       return this->StreamedServiceServers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ServiceServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServiceServers(::grpc::ServerContext* /*context*/, const ::core::ServiceServerRequest* /*request*/, ::core::ServiceServerReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServiceServers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::ServiceServerRequest,::core::ServiceServerReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ServiceServers<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::core::SubscribeRequest, ::core::SubscribeReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::core::SubscribeRequest, ::core::SubscribeReply>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::core::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::core::SubscribeReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::core::SubscribeRequest,::core::SubscribeReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Publish : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Publish() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::core::PublishRequest, ::core::PublishReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::core::PublishRequest, ::core::PublishReply>* streamer) {
                       return this->StreamedPublish(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Publish() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publish(::grpc::ServerContext* /*context*/, const ::core::PublishRequest* /*request*/, ::grpc::ServerWriter< ::core::PublishReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPublish(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::core::PublishRequest,::core::PublishReply>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ServiceClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServiceClients() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::core::ServiceClientRequest, ::core::ServiceClientReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::core::ServiceClientRequest, ::core::ServiceClientReply>* streamer) {
                       return this->StreamedServiceClients(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServiceClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServiceClients(::grpc::ServerContext* /*context*/, const ::core::ServiceClientRequest* /*request*/, ::grpc::ServerWriter< ::core::ServiceClientReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServiceClients(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::core::ServiceClientRequest,::core::ServiceClientReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<WithSplitStreamingMethod_Publish<WithSplitStreamingMethod_ServiceClients<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<WithSplitStreamingMethod_Publish<WithStreamedUnaryMethod_ServiceServers<WithSplitStreamingMethod_ServiceClients<Service > > > > StreamedService;
};

}  // namespace core


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_registration_2eproto__INCLUDED
