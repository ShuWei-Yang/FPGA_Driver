// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: connection.proto
#ifndef GRPC_connection_2eproto__INCLUDED
#define GRPC_connection_2eproto__INCLUDED

#include "connection.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace core {

class Connection final {
 public:
  static constexpr char const* service_full_name() {
    return "core.Connection";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::core::SubscriberReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>> AsyncSubscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>>(AsyncSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>> PrepareAsyncSubscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>>(PrepareAsyncSubscriberRaw(context, request, cq));
    }
    virtual ::grpc::Status Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::core::PublisherReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>> AsyncPublisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>>(AsyncPublisherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>> PrepareAsyncPublisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>>(PrepareAsyncPublisherRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>* AsyncSubscriberRaw(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::SubscriberReply>* PrepareAsyncSubscriberRaw(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>* AsyncPublisherRaw(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::core::PublisherReply>* PrepareAsyncPublisherRaw(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::core::SubscriberReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>> AsyncSubscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>>(AsyncSubscriberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>> PrepareAsyncSubscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>>(PrepareAsyncSubscriberRaw(context, request, cq));
    }
    ::grpc::Status Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::core::PublisherReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>> AsyncPublisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>>(AsyncPublisherRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>> PrepareAsyncPublisher(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>>(PrepareAsyncPublisherRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response, std::function<void(::grpc::Status)>) override;
      void Subscriber(::grpc::ClientContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response, std::function<void(::grpc::Status)>) override;
      void Publisher(::grpc::ClientContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>* AsyncSubscriberRaw(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::SubscriberReply>* PrepareAsyncSubscriberRaw(::grpc::ClientContext* context, const ::core::SubscriberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>* AsyncPublisherRaw(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::core::PublisherReply>* PrepareAsyncPublisherRaw(::grpc::ClientContext* context, const ::core::PublisherRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscriber_;
    const ::grpc::internal::RpcMethod rpcmethod_Publisher_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Subscriber(::grpc::ServerContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response);
    virtual ::grpc::Status Publisher(::grpc::ServerContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscriber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscriber(::grpc::ServerContext* context, ::core::SubscriberRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::SubscriberReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Publisher() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublisher(::grpc::ServerContext* context, ::core::PublisherRequest* request, ::grpc::ServerAsyncResponseWriter< ::core::PublisherReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscriber<WithAsyncMethod_Publisher<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscriber() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::core::SubscriberRequest, ::core::SubscriberReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::SubscriberRequest* request, ::core::SubscriberReply* response) { return this->Subscriber(context, request, response); }));}
    void SetMessageAllocatorFor_Subscriber(
        ::grpc::MessageAllocator< ::core::SubscriberRequest, ::core::SubscriberReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::SubscriberRequest, ::core::SubscriberReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Publisher() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::core::PublisherRequest, ::core::PublisherReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::core::PublisherRequest* request, ::core::PublisherReply* response) { return this->Publisher(context, request, response); }));}
    void SetMessageAllocatorFor_Publisher(
        ::grpc::MessageAllocator< ::core::PublisherRequest, ::core::PublisherReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::core::PublisherRequest, ::core::PublisherReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publisher(
      ::grpc::CallbackServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscriber<WithCallbackMethod_Publisher<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscriber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Publisher() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscriber() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscriber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Publisher() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPublisher(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscriber() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Subscriber(context, request, response); }));
    }
    ~WithRawCallbackMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Subscriber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Publisher() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Publisher(context, request, response); }));
    }
    ~WithRawCallbackMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Publisher(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Subscriber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Subscriber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::SubscriberRequest, ::core::SubscriberReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::SubscriberRequest, ::core::SubscriberReply>* streamer) {
                       return this->StreamedSubscriber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Subscriber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscriber(::grpc::ServerContext* /*context*/, const ::core::SubscriberRequest* /*request*/, ::core::SubscriberReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscriber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::SubscriberRequest,::core::SubscriberReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Publisher : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Publisher() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::core::PublisherRequest, ::core::PublisherReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::core::PublisherRequest, ::core::PublisherReply>* streamer) {
                       return this->StreamedPublisher(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Publisher() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Publisher(::grpc::ServerContext* /*context*/, const ::core::PublisherRequest* /*request*/, ::core::PublisherReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPublisher(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::core::PublisherRequest,::core::PublisherReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Subscriber<WithStreamedUnaryMethod_Publisher<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Subscriber<WithStreamedUnaryMethod_Publisher<Service > > StreamedService;
};

}  // namespace core


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_connection_2eproto__INCLUDED
